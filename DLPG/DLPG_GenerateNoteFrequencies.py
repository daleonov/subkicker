# Based on http://subsynth.sourceforge.net/midinote2freq.html
import argparse
from os import path

def a_valid_freq(x):
    x = float(x)
    if x < 430.0 or x > 450.0:
        raise argparse.ArgumentTypeError("%r not in valid range 430.0..450.0"%(x,))
    return x

def GenerateNamesAndFrequencies(nNumberOfNotes, sConvention, sFlatSharp, fAFrequency):
	dnOctaveNumberOffset = {
		'C3': -2,
		'C4': -1
	}
	dlsNoteNames = {
		'#': ('C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'),
		'b': ('C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B')
	}
	#lfNoteFrequencies = []
	lsNoteLabels = []
	dNoteFrequencies = {}
	for i in range(0, nNumberOfNotes):
		nOctaveNumber = dnOctaveNumberOffset[sConvention] + i // 12
		nNoteNameIndex = i % 12
		sNoteLabel = dlsNoteNames[sFlatSharp][nNoteNameIndex] + str(nOctaveNumber)
		lsNoteLabels.append(sNoteLabel)
		fFrequency = (fAFrequency/32)*(2**(float(i-9)/12))
		#lfNoteFrequencies.append(fFrequency)
		dNoteFrequencies[sNoteLabel] = fFrequency
	return (lsNoteLabels, dNoteFrequencies)

def GenerateHeader(lsNoteLabels, dNoteFrequencies, sFileName):
	sNewLine = '\r\n'
	sIndentation  = '  '
	sHeader = ''
	nIndex = 1
	nFreqsInLine = 4
	nNoteNamesInLine = 12
	# Header's header
	sHeaderMacro = '__' + path.split(sFileName)[1].upper().replace('.', '_')
	sHeader += '// Generated by ' + __file__ + ' script' + sNewLine*2
	sHeader += '#ifndef ' + sHeaderMacro + sNewLine
	sHeader += '#define ' + sHeaderMacro + sNewLine*2
	# Frequencies
	sHeader += 'double afNoteFrequencies['+str(len(lsNoteLabels))+'] = {' + sNewLine + sIndentation
	for sNoteLabel in lsNoteLabels:
		sHeader += '%22.16f'%(dNoteFrequencies[sNoteLabel])
		if nIndex < len(lsNoteLabels):
			sHeader += ', '
		elif nIndex % nFreqsInLine != 0:
			sHeader += sNewLine
		if nIndex % nFreqsInLine == 0:
			sHeader += sNewLine
			if nIndex < len(lsNoteLabels):
				sHeader += sIndentation
		nIndex += 1
	sHeader += '};' + sNewLine*2

	nIndex = 1
	# Note labels
	sHeader += 'char* asNoteLabels['+str(len(lsNoteLabels))+'] = {' + sNewLine + sIndentation
	for sNoteLabel in lsNoteLabels:
		sHeader += '%6s'%('\"'+sNoteLabel+'\"')
		if nIndex < len(lsNoteLabels):
			sHeader += ', '
		elif nIndex % nNoteNamesInLine != 0:
			sHeader += sNewLine
		if nIndex % nNoteNamesInLine == 0:
			sHeader += sNewLine
			if nIndex < len(lsNoteLabels):
				sHeader += sIndentation
		nIndex += 1
	sHeader += '};' + sNewLine*2
	# Header's footer
	sHeader += '#endif //' + sHeaderMacro + sNewLine
	return sHeader

if __name__ == '__main__':
	cParser = argparse.ArgumentParser()
	cParser.add_argument(
		'-n','--number-of-notes',
		type = int,
		default = 128,
		#choices = range(1, 129),
		help = 'Generates that amount of notes from lowest C (always). Default is 128. ',
		required = False
		)
	cParser.add_argument(
		'-c','--convention',
		type = str,
		default = 'C3',
		choices = ['C3', 'C4'],
		help = 'Number of the middle C (Yamaha or Roland standards). Default is C3. ',
		required = False
		)
	cParser.add_argument(
		'-fs','--flat-sharp',
		type = str,
		default = '#',
		choices = ['#', 'b'],
		help = 'Use \"#\" or \"b\" in note names. Default is \"#\". ',
		required = False
		)
	cParser.add_argument(
		'-a','--a-frequency',
		type = a_valid_freq,
		default = a_valid_freq(440.),
		help = 'Frequency of middle A note. Default is 440.',
		required = False
		)
	cParser.add_argument(
		'-o','--output-file',
		type = str,
		help = 'Output file',
		required = True
		)
	cArgs = cParser.parse_args()
	print cArgs
	lsNoteLabels, dNoteFrequencies = GenerateNamesAndFrequencies(cArgs.number_of_notes, cArgs.convention, cArgs.flat_sharp, cArgs.a_frequency)

	#for sNoteName in lsNoteLabels:
	#	print(sNoteName + ': ' + str(dNoteFrequencies[sNoteName]))

	sHeader = GenerateHeader(lsNoteLabels, dNoteFrequencies, cArgs.output_file)
	fHeaderFile = open(cArgs.output_file, 'w+')
	fHeaderFile.write(sHeader)
	fHeaderFile.close()
